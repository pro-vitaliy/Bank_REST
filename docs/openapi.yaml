openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /api/users:
    get:
      tags:
        - user-controller
      operationId: getAll
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
    post:
      tags:
        - user-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateDTO"
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
  /api/transfer:
    post:
      tags:
        - transfer-controller
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
        required: true
      responses:
        "200":
          description: OK
  /api/login:
    post:
      tags:
        - authentication-controller
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/cards:
    get:
      tags:
        - card-controller
      operationId: getAllCards
      parameters:
        - name: params
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/CardParamsDTO"
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardDTO"
    post:
      tags:
        - card-controller
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCreateDTO"
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDTO"
  /api/users/{id}:
    get:
      tags:
        - user-controller
      operationId: show
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
    delete:
      tags:
        - user-controller
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
    patch:
      tags:
        - user-controller
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
  /api/users/{id}/roles:
    patch:
      tags:
        - user-controller
      operationId: updateRoles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRolesUpdateDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
  /api/cards/{id}/block:
    patch:
      tags:
        - card-controller
      operationId: blockCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDTO"
  /api/cards/{id}/activate:
    patch:
      tags:
        - card-controller
      operationId: activateCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDTO"
  /api/users/{userId}/cards:
    get:
      tags:
        - card-controller
      operationId: getCardsByUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: params
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/CardParamsDTO"
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardDTO"
  /api/cards/{id}:
    get:
      tags:
        - card-controller
      operationId: getCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDTO"
    delete:
      tags:
        - card-controller
      operationId: delete_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
  /api/cards/{id}/number:
    get:
      tags:
        - card-controller
      operationId: revealFullNumber
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/cards/{id}/balance:
    get:
      tags:
        - card-controller
      operationId: getCardBalance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: number
components:
  schemas:
    UserCreateDTO:
      type: object
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          maxLength: 2147483647
          minLength: 3
        roles:
          type: array
          items:
            type: string
            enum:
              - ROLE_ADMIN
              - ROLE_USER
          minItems: 1
          uniqueItems: true
      required:
        - password
        - roles
        - username
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        maskedCardNumbers:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        roles:
          type: array
          items:
            type: string
            enum:
              - ROLE_ADMIN
              - ROLE_USER
          uniqueItems: true
    TransferRequest:
      type: object
      properties:
        cardNumFrom:
          type: string
          minLength: 1
        carsNumTo:
          type: string
          minLength: 1
        amount:
          type: number
      required:
        - amount
        - cardNumFrom
        - carsNumTo
    AuthRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
      required:
        - password
        - username
    CardCreateDTO:
      type: object
      properties:
        cardNumber:
          type: string
          pattern: "\\d{16}"
        ownerId:
          type: integer
          format: int64
        expirationDate:
          type: string
          format: date
        cardStatus:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        balance:
          type: number
          minimum: 0.00
      required:
        - cardNumber
        - expirationDate
        - ownerId
    CardDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        maskedCardNumber:
          type: string
        ownerId:
          type: integer
          format: int64
        expirationDate:
          type: string
          format: date
        cardStatus:
          type: string
        balance:
          type: number
        createdAt:
          type: string
          format: date
    UserUpdateDTO:
      type: object
      properties:
        username:
          type: string
          example: newName
          minLength: 1
        password:
          type: string
          example: newPassword
          maxLength: 2147483647
          minLength: 3
    UserRolesUpdateDTO:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
            enum:
              - ROLE_ADMIN
              - ROLE_USER
          minItems: 1
          uniqueItems: true
      required:
        - roles
    CardParamsDTO:
      type: object
      properties:
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        ownerId:
          type: integer
          format: int64
        expirationDateGte:
          type: string
          format: date
        expirationDateLte:
          type: string
          format: date
        balanceGte:
          type: number
        balanceLte:
          type: number
        createdAtGte:
          type: string
          format: date
        createdAtLte:
          type: string
          format: date
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    PageCardDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardDTO"
        number:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        empty:
          type: boolean
        unsorted:
          type: boolean